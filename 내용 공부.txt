[[[com.contract.backend]]] -> 최상위 root
- BackendApplication : Spring Boot 프레임워크를 사용하여 자바 애플리케이션을 시작하는 메인 클래스

[[[com.contract.backend.common.config]]] -> 주요 설정(Configuration)들을 정의하고 구성
- FabricProperties : Hyperledger Fabric 접속 정보를 자바 코드에서 편리하게 사용하도록 매핑하고 유효성을 검증하는 클래스
- PasswordEncoderConfig : 사용자 비밀번호를 암호화하고 검증할 Bean 설정 클래스
- SecurityConfig : CORS 보안설정

[[[com.contract.backend.common.dto]]] -> DTO(데이터 전송 객체) 패키지
- AddParticipantRequestDTO : 새로운 참여자 요청 데이터(참여자 고유 ID, 역할)를 클라이언트에서 서버로 전달하는 DTO
- AuthResponseDTO : 인증 성공 후 발급된 액세스 토큰(Access Token)과 리프레시 토큰(Refresh Token)을 클라이언트에 전달하는 DTO
- BlockchainMetadataDTO : 계약서의 메타데이터를 블록체인에 기록하거나 조회하기 위한 표준화된 데이터 구조
- BlockchainTransactionResponseDTO : BlockchainMetadataDTO 실행 후 트랜잭션 ID, 상태, 메시지를 클라이언트에 전달하는 DTO
- ContractIntegrityVerificationDTO : DB 내부 무결성 및 블록체인 기록과의 일치성 검증 결과를 단계별로 상세히 담아 전달하는 DTO
- ContractUpdateRequestDTO : 계약서 제목이랑 설명 수정을 서버에 전달하기 위한 DTO (기존 계약 수정)
- ContractUploadRequestDTO : 새로운 계약을 시스템에 업로드할 때 필요한 정보를 담아 클라이언트에서 서버로 전달하는 DTO (업로드)
- LoginRequestDTO : 로그인 이메일, 비밀번호 서버로 전달하기 위한 DTO
- RefreshTokenRequestDTO : 리프레시 토큰을 서버로 전달하여 새로운 액세스 토큰 발급을 요청 DTO (로그인 시간 만료 초기화)
- SignupRequestDTO : 회원 가입을 위해 사용자 이름, 비밀번호, 이메일 정보를 서버에 전달하는 데 사용되는 DTO
- TokenResponseDTO : 서버가 클라이언트에게 액세스 토큰만을 전달할때 DTO
- UserResponseDTO : 사용자 ID, 이름, 이메일 같은 사용자 정보를 서버에서 클라이언트로 전달하기 위한 DTO
- WebAuthnLoginVerifyRequestDTO : WebAuthn 기반 로그인 DTO (인증 검증 요청) (보안성이 높고 편리함)
- WebAuthnRegisterVerifyRequestDTO : 계정 등록, 키를 통해 API 호출, 검증요청 순의 공개키-개인키 검증을 위한 DTO

[[[com.contract.backend.common.Entity]]] -> 계약 관리 백엔드 시스템의 핵심 데이터 모델을 정의하는 엔티티 패키지
- BlockchainRecordEntity : 블록체인에 기록된 트랜잭션, 메타데이터를 데이터베이스에 저장하는 엔티티
- ContractEntity : 계약의 주요 정보(제목, 설명, 생성자, 상태 등)와 현재 버전, 변경 이력을 데이터베이스에 저장하고 관리하는 엔티티
- ContractPartyEntity : 계약에 사용자가 어떤 역할로 언제부터 참여하게 되었는지를 기록하고 관리하는 엔티티
- ContractVersionEntity : 계약의 각 버전별 문서 파일 정보(경로, 해시), 버전 번호, 상태, 생성 시점 등을 데이터베이스에 저장하고 관리하는 엔티티
- CredentialEntity : WebAuthn 기반 고유 ID, 공개키, 서명 횟수, 기기명 등을 데이터베이스에 저장하고 관리하는 엔티티
- FolderContractEntity : "어떤 FolderEntity (폴더) 안에 어떤 ContractEntity (계약)가 들어있다"는 엔티티
- FolderEntity : 파일 시스템의 ‘폴더’ 와 같은 개념을 구현하기 위한 엔티티
- SignatureEntity : 전자 계약 시스템에서 사용자의 서명 정보를 기록하고 관리하는 엔티티
- UserEntity : 사용자의 기본 정보를 저장하고 관리하기 위한 핵심적인 엔티티

[[[com.contract.backend.common.Entity.enumm]]] -> 계약 관리 백엔드 상태(역할)
- ContractStatus : 계약 진행중, 완료, 취소 : OPEN, CLOSED, CANCELLED
- PartyRole : 계약자, 계약 상대방 타입 : INITIATOR, COUNTERPARTY
- VersionStatus : 서명 대기, 서명 완료, 기록 보존 : PENDING_SIGNATURE, SIGNED, ARCHIVED

[[[com.contract.backend.common.Entity.idClass]]] -> 복합 키를 정의하는 ID 클래스들을 모아놓은 곳
- FolderContractId : FolderContractEntity의 복합 기본 키(folder_id와 contract_id의 조합)를 정의하고 관리하기 위한 자바 클래스

[[[com.contract.backend.common.exception]]] -> 예외상황
- CustomException : 특정 오류 상황 발생 시, 해당 오류에 대한 구체적인 정보(메시지, HTTP 상태 코드)를 담아 시스템에 알리는 실제 예외 클래스
- CustomExceptionEnum : 발생 가능한 다양한 예외 유형들과 각 유형에 대한 대응 정보(오류 메시지, HTTP 상태 코드)를 미리 정의해 놓은 코드
- GlobalExceptionHandler : CustomException을 받아서, CustomExceptionEnum를 사용하여 클라이언트에게 최종적인 HTTP 응답을 생성하여 알려줌

[[[com.contract.backend.common.repository]]] -> 데이터베이스 접근 계층 리포지토리 인터페이스 (CRUD 작업을 쉽게 할 수 있도록 미리 약속된 규칙)
- BlockchainRecordRepository : ContractVersionEntity로 BlockchainRecordEntity를 데이터베이스에서 편리하게 조회할 수 있는 리포지토리 인터페이스
- ContractPartyRepository : ContractPartyEntity를 관리하며, 당사자 목록 및 계약을 쉽게 조회할 수 있는 리포지토리 인터페이스
- ContractRepository : ContractEntity를 관리하며, 계약 생성자 또는 계약 상태를 기준으로 계약 목록을 조회할 수 있는 리포지토리 인터페이스
- ContractVersionRepository : ContractVersionEntity를 관리하며, 특정 계약, 계약과 버전 번호, 또는 버전 상태를 쉽게 조회할 수 있는 리포지토리 인터페이스
- JpaCredentialRepository : CredentialEntity를 관리하며, 특정 인증 수단 또는 전체 목록을 조회하는 기능을 제공하는 리포지토리 인터페이스
- SignatureRepository : SignatureEntity를 관리하며, 계약 버전에 대한 서명 정보를 조회하거나 사용자의 서명 여부를 확인하는 리포지토리 인터페이스
- UserRepository : UserEntity를 관리하며, 사용자의 이메일 또는 UUID를 기준으로 사용자 정보를 조회하는 기능을 제공하는 리포지토리 인터페이스

[[[com.contract.backend.common.response]]] -> API 응답처리 클래스
- ApiResponse : 성공/실패 여부, 실제 전달 데이터, 그리고 관련 메시지를 클라이언트에게 보내주는 클래스

[[[com.contract.backend.common.util.jwt]]] ->JWT 기반 인증 및 권한 부여 필터 (진짜 우리 회원인지, 그리고 어떤 권한을 가졌는지)
- JwtAuthenticationFilter : JWT(JSON Web Token)토큰을 꺼내 유효성을 검사하고 인증처리하는 보안 필터 클래스
- JwtTokenProvider : JWT(JSON Web Token)의 생성, 유효성 검증, 그리고 토큰에서 정보 추출을 담당하는 핵심 유틸리티 클래스

[[[com.contract.backend.common.util.webauthn]]]
- CredentialRepositoryImpl :  WebAuthn 라이브러리를 사용하여 웹 인증(Web Authentication) 기능을 구현할 때, 서버 측에서 사용자 인증 정보를 데이터베이스에 저장하고 조회하는 역할

[[[com.contract.backend.controller]]] -> API 엔드포인트들을 정의하는 컨트롤러 클래스들의 모음
- AuthController : 사용자 회원가입, 로그인(기존방식, WebAuthn), 로그아웃, 토큰 관리, WebAuthn 인증 수단 관리 API
- ContractService : 계약 업로드/수정, 참여자 추가, 계약 무결성 검증 등의 기능을 제공하는 API 엔드포인트
- SignatureController : 인증된 사용자가 특정 계약에 대해 전자 서명을 수행하고 그 결과를 기록하는 API 엔드포인트

[[[com.contract.backend.service]]]  -> 애플리케이션의 핵심 비즈니스 로직 처리 패키지
- AuthService :  사용자 회원가입, 이메일/비밀번호 기반 로그인(JWT 토큰 발급), 사용자 정보 조회, 로그아웃 처리 등 애플리케이션의 핵심 인증 로직 서비스
- B2StorageServiceImpl : 업로드된 파일을 Backblaze B2 클라우드 스토리지에 고유한 이름으로 저장하고, 저장된 파일의 식별키를 반환하는 역할
- BlockchainService : 계약 버전의 중요 정보(메타데이터 및 서명자)를 블록체인에 기록하고, 기록된 정보를 다시 블록체인에서 조회하는 표준화된 방법 로직
- ContractService : 계약의 생성, 버전 관리, 파일 저장, 참여자 관리 기능을 제공, 로컬 데이터와 블록체인 기록을 비교하여 계약의 무결성 검증 핵심 로직
- HyperledgerFabricService :  Hyperledger Fabric 네트워크에 접속하여, 계약 메타데이터를 체인코드를 통해 원장에 기록하고 다시 조회하는 블록체인 연동 로직
- S3StorageService : S3 호환 클라우드 스토리지에 파일을 업로드하고 해당 버킷 이름을 조회하는 표준화된 방법을 제공
- SignatureService : S3 호환 스토리지에 파일을 올리고(upload) 해당 저장소의 버킷 이름을 가져오는(getBucketName) 표준 방법을 정의
- WebAuthnService : WebAuthn 인증 수단을 등록하고, 비밀번호 없이 로그인하며, 등록된 인증 수단을 관리할 수 있도록 하는 모든 서버 측 로직
안녕하세요, 사용자님! 지금 진행하고 계신 내용은 Spring Boot 애플리케이션에서 업로드한 파일의 정보를 Hyperledger Fabric 블록체인에 기록하기 위한 중간 서버, 즉 **Node.js Gateway 서버**를 만드는 과정입니다. 이 게이트웨이가 있어야 Spring Boot 애플리케이션이 블록체인 네트워크와 통신할 수 있습니다.

조금 복잡하게 느껴지실 수 있지만, 하나씩 차근차근 설명해 드릴게요.

**핵심 질문: `blockchain-gateway/` 이건 어디있는 건가요? 새로운 파일을 만들라는 건가요?**

네, 맞습니다! `blockchain-gateway/`는 **사용자님께서 직접 새로 만들어야 하는 폴더(디렉토리)의 이름**입니다. 이 폴더 안에 Node.js로 만드는 게이트웨이 서버 관련 파일들을 구성하게 됩니다. 위치는 사용자님 컴퓨터의 원하시는 곳 어디든 괜찮습니다. 예를 들어, 바탕화면이나 개발 프로젝트를 모아두는 폴더 안에 만드시면 됩니다.

이제 각 단계를 자세히 살펴보겠습니다.

---

### ✅ **1단계 (복습): 전체 시스템 구조 이해**

잠깐 전체 그림을 다시 한번 짚고 넘어갈게요.

1.  **사용자 PC의 Spring Boot 애플리케이션 (Java):** 파일 업로드를 받고, 파일 해시를 생성합니다.
2.  **(지금 만들고 있는) Node.js Gateway 서버:** Spring Boot 앱으로부터 파일 정보(ID, 해시)를 HTTP 요청으로 받습니다. 이 정보를 Hyperledger Fabric 네트워크에 전달(트랜잭션 제출)하는 역할을 합니다.
3.  **Hyperledger Fabric 네트워크:** 블록체인 네트워크로, 원장(ledger)에 파일 해시 정보를 영구적으로 기록합니다.

지금은 2번, **Node.js Gateway 서버**를 만드는 단계입니다.

---

### ✅ **2단계: Node.js Gateway 서버 만들기 (Hyperledger Fabric 호출)**

이 단계에서 `blockchain-gateway/` 라는 폴더를 만들고, 그 안에 필요한 파일들을 구성합니다.

**1. `blockchain-gateway/` 폴더 생성:**

   먼저, 컴퓨터의 원하시는 위치에 `blockchain-gateway` 라는 새 폴더를 만들어주세요.
   예: `C:\Users\YourName\Projects\blockchain-gateway` 또는 `/Users/YourName/Projects/blockchain-gateway`

**2. `blockchain-gateway/` 폴더 내부 구조 설명 및 파일 준비:**

   `blockchain-gateway/` 폴더 안은 다음과 같은 구조를 가지게 됩니다.

   ```
   blockchain-gateway/
   ├── gateway.js         // (새로 만들 파일) 게이트웨이 서버 로직
   ├── wallet/            // (폴더, registerUser.js 실행 후 내용 채워짐 또는 수동 생성) 사용자 인증서 저장
   ├── connection.json    // (복사해올 파일) Fabric 네트워크 접속 정보
   ├── package.json       // (npm 명령으로 생성될 파일) 프로젝트 정보 및 의존성
   ```

**3. 📦 의존성 설치 (터미널/명령 프롬프트에서 실행):**

   *   터미널(Windows의 경우 명령 프롬프트 또는 PowerShell, macOS/Linux의 경우 터미널)을 여세요.
   *   방금 만든 `blockchain-gateway/` 폴더로 이동합니다. 명령어는 다음과 같습니다 (예시 경로):
      ```bash
      cd C:\Users\YourName\Projects\blockchain-gateway
      ```
      또는
      ```bash
      cd /Users/YourName/Projects/blockchain-gateway
      ```
   *   폴더로 이동한 후, 다음 명령어들을 순서대로 입력하고 실행하세요.
      *   `npm init -y`
          *   **설명:** Node.js 프로젝트를 초기화하고 `package.json` 파일을 생성합니다. 이 파일에는 프로젝트의 이름, 버전, 사용된 라이브러리 등의 정보가 기록됩니다. `-y` 옵션은 모든 질문에 기본값으로 자동 응답합니다.
      *   `npm install express fabric-network body-parser`
          *   **설명:** 게이트웨이 서버를 만드는 데 필요한 라이브러리(패키지)들을 설치합니다.
              *   `express`: Node.js에서 웹 서버를 쉽게 만들 수 있도록 도와주는 프레임워크입니다. Spring Boot와 유사한 역할을 합니다.
              *   `fabric-network`: Hyperledger Fabric 네트워크와 통신하기 위한 공식 SDK(소프트웨어 개발 키트)입니다.
              *   `body-parser`: 웹 서버가 클라이언트로부터 받은 데이터(예: JSON)를 쉽게 처리할 수 있도록 도와줍니다.

**4. `connection.json` 파일 준비:**

   *   **이 파일은 어디서 가져오나요?**
      Hyperledger Fabric 샘플 프로젝트의 테스트 네트워크 설정 파일입니다. 일반적으로 다음 경로에 있습니다.
      `fabric-samples/test-network/organizations/peerOrganizations/org1.example.com/connection-org1.json`
   *   **해야 할 일:**
      위 경로에서 `connection-org1.json` 파일을 찾아서 **복사**한 후, 우리가 만든 `blockchain-gateway/` 폴더 안에 **붙여넣기** 하세요. 그리고 파일 이름을 `connection.json`으로 변경해주세요.
      *   정리: `blockchain-gateway/connection.json` 파일이 되도록 합니다.
   *   **이 파일의 역할:**
      `gateway.js` 코드가 Hyperledger Fabric 네트워크의 어떤 노드(피어, 오더러, CA)에 접속해야 하는지, 각 노드의 주소는 무엇인지 등의 접속 정보를 담고 있습니다.

**5. 📄 `gateway.js` 파일 작성:**

   *   `blockchain-gateway/` 폴더 안에 `gateway.js` 라는 이름으로 **새 텍스트 파일을 만드세요.**
   *   그리고 사용자님께서 제공해주신 다음 코드를 복사하여 `gateway.js` 파일 전체에 붙여넣고 저장하세요.

     ```javascript
     const express = require('express');
     const { Gateway, Wallets } = require('fabric-network');
     const path = require('path');
     const fs = require('fs');
     const bodyParser = require('body-parser');

     const app = express();
     app.use(bodyParser.json()); // HTTP 요청의 본문(body)을 JSON으로 파싱하기 위함

     // Spring Boot 앱에서 파일 ID와 해시를 받아 블록체인에 저장하는 API 엔드포인트
     app.post('/store', async (req, res) => {
       const { fileId, fileHash } = req.body; // Spring Boot가 보낸 JSON 데이터에서 fileId와 fileHash를 추출

       try {
         // 1. Fabric 네트워크 연결 설정 파일(connection.json) 로드
         const ccpPath = path.resolve(__dirname, 'connection.json'); // gateway.js와 같은 폴더에 있는 connection.json
         const ccp = JSON.parse(fs.readFileSync(ccpPath, 'utf8'));

         // 2. 사용자 인증서(wallet) 경로 설정 및 로드
         // 이 wallet 폴더는 registerUser.js를 실행하여 appUser의 인증서를 넣어둘 곳입니다.
         const walletPath = path.join(__dirname, 'wallet');
         const wallet = await Wallets.newFileSystemWallet(walletPath);

         // 3. 사용할 사용자(appUser) 인증서 확인
         const identity = await wallet.get('appUser');
         if (!identity) {
           // appUser 인증서가 없으면 오류 응답
           console.error('appUser 인증서가 wallet에 존재하지 않습니다. registerUser.js를 먼저 실행하세요.');
           return res.status(401).send('appUser 인증서가 없어 Fabric 네트워크에 접근할 수 없습니다. 관리자에게 문의하거나 registerUser.js를 실행하세요.');
         }

         // 4. 게이트웨이 생성 및 Fabric 네트워크에 연결
         const gateway = new Gateway();
         await gateway.connect(ccp, {
           wallet,                            // 사용할 지갑
           identity: 'appUser',              // 사용할 사용자 ID
           discovery: { enabled: true, asLocalhost: true }, // 네트워크 검색 기능 활성화 (테스트 네트워크용)
         });

         // 5. 채널(mychannel) 및 체인코드(filecontract) 가져오기
         const network = await gateway.getNetwork('mychannel'); // test-network 기본 채널
         const contract = network.getContract('filecontract');   // 배포한 체인코드 이름

         // 6. 체인코드의 storeFileHash 함수 호출하여 트랜잭션 제출
         console.log(`체인코드 함수 'storeFileHash' 호출 시도: fileId=${fileId}, fileHash=${fileHash}`);
         await contract.submitTransaction('storeFileHash', fileId, fileHash);
         console.log('트랜잭션이 성공적으로 제출되었습니다.');

         // 7. 게이트웨이 연결 해제
         await gateway.disconnect();

         // 8. 성공 응답 전송
         res.send(`파일 정보 [${fileId}]가 블록체인에 성공적으로 저장되었습니다.`);

       } catch (error) {
         // 오류 발생 시 콘솔에 상세 오류 출력 및 클라이언트에 오류 메시지 전송
         console.error(`Fabric 네트워크 호출 중 오류 발생: ${error.stack || error}`);
         res.status(500).send(`블록체인 처리 중 오류 발생: ${error.message}`);
       }
     });

     // 서버 실행 (4000번 포트)
     app.listen(4000, () => {
       console.log('Blockchain Gateway 서버가 4000번 포트에서 실행 중입니다.');
       console.log('Spring Boot 애플리케이션에서 http://localhost:4000/store 경로로 POST 요청을 보내세요.');
     });
     ```
   *   **`gateway.js` 파일의 역할:**
      *   `express`를 사용해 웹 서버를 만듭니다.
      *   `http://localhost:4000/store` 라는 주소로 `POST` 방식의 요청을 받을 수 있게 설정합니다.
      *   요청이 오면 (Spring Boot 앱에서 파일 ID와 해시를 보내면),
          *   `connection.json` 파일을 읽어 Fabric 네트워크에 접속 준비를 합니다.
          *   `wallet/` 폴더에서 `appUser`라는 사용자의 인증서를 찾아 사용합니다. (이 인증서는 아래 4단계에서 만듭니다)
          *   Fabric 네트워크(`mychannel`)에 연결하고, 배포된 체인코드(`filecontract`)를 가져옵니다.
          *   체인코드의 `storeFileHash` 함수를 호출하여 파일 ID와 해시를 블록체인 원장에 기록합니다.
          *   성공 또는 실패 메시지를 Spring Boot 앱에 다시 보내줍니다.

여기까지 하면 `blockchain-gateway/` 폴더에 `gateway.js`, `connection.json`, `package.json` 파일이 준비되고, `npm install`을 통해 `node_modules` 폴더(라이브러리들이 설치된 곳)도 생성되었을 것입니다. `wallet/` 폴더는 아직 비어있거나 없을 수 있습니다.

---

### ✅ **3단계: Hyperledger Fabric 준비**

이 부분은 사용자님께서 이미 `fabric-samples/test-network`에서 다음 명령어들을 실행했다고 하신 내용을 기반으로 합니다.

```bash
./network.sh up                    # 테스트 네트워크 시작
./network.sh createChannel -c mychannel # 'mychannel'이라는 채널 생성
./network.sh deployCC -ccn filecontract -ccp ../chaincode/contract -ccl javascript # 'filecontract'라는 체인코드 배포
```

이 명령어들이 성공적으로 실행되었다면, Hyperledger Fabric 네트워크는 준비된 상태입니다.

---

### ✅ **4단계: 앱 사용자 등록 (`registerUser.js`)**

`gateway.js`가 Fabric 네트워크와 통신하려면, 마치 우리가 웹사이트에 로그인하듯 인증된 사용자의 신원이 필요합니다. 여기서는 `appUser`라는 이름의 사용자를 만들고, 그 사용자의 인증서(디지털 신분증)를 발급받아 `wallet/` 폴더에 저장하는 과정입니다. 이 작업은 `registerUser.js`라는 별도의 스크립트를 실행하여 수행합니다.

**1. `registerUser.js` 파일 위치 및 실행 환경:**

   *   이 스크립트는 **`fabric-samples/application-gateway/`** 디렉토리에서 실행하도록 안내되어 있습니다.
   *   만약 `fabric-samples/application-gateway/` 디렉토리가 없다면, `fabric-samples` 폴더 안에 새로 만드셔야 합니다.
   *   사용자님의 지침에는 `cd fabric-samples/test-network` 후 `cp -r ../chaincode/contract ../application-gateway` 명령어가 있는데, 이는 `fabric-samples/chaincode/contract` 폴더를 `fabric-samples/application-gateway`로 복사하는 것으로 보입니다. 보통 `application-gateway` 예제는 `fabric-samples` 안에 별도로 존재하거나, `test-network` 내부에 간단한 애플리케이션 예제가 포함되기도 합니다.
   *   **가장 중요한 것은 `registerUser.js`가 필요로 하는 `connection-org1.json` 파일의 경로를 정확히 맞추는 것입니다.**

**2. `registerUser.js` 파일 작성:**

   *   **`fabric-samples/application-gateway/`** 디렉토리 (또는 사용자님이 `registerUser.js`를 두기로 결정한 위치)에 `registerUser.js` 라는 이름으로 **새 텍스트 파일을 만드세요.**
   *   그리고 사용자님께서 제공해주신 다음 코드를 복사하여 `registerUser.js` 파일 전체에 붙여넣고 저장하세요.

     ```javascript
     const { Wallets, Gateway } = require('fabric-network');
     const FabricCAServices = require('fabric-ca-client');
     const path = require('path');
     const fs = require('fs');

     async function main() {
       try {
         // 1. Fabric 네트워크 연결 설정 파일(connection-org1.json) 로드
         // 이 경로는 registerUser.js 파일의 위치를 기준으로 test-network 내의 connection-org1.json을 가리켜야 합니다.
         // 현재 코드는 registerUser.js가 application-gateway 폴더에 있고,
         // application-gateway 폴더와 test-network 폴더가 fabric-samples 바로 아래에 같은 레벨로 있다고 가정합니다.
         // 예: fabric-samples/application-gateway/registerUser.js
         //     fabric-samples/test-network/organizations/peerOrganizations/org1.example.com/connection-org1.json
         const ccpPath = path.resolve(__dirname, '..', 'test-network', 'organizations', 'peerOrganizations', 'org1.example.com', 'connection-org1.json');
         const ccp = JSON.parse(fs.readFileSync(ccpPath, 'utf8'));

         // 2. CA(Certificate Authority) 클라이언트 생성
         // connection-org1.json 파일에서 CA 서버 URL을 가져옵니다.
         const caURL = ccp.certificateAuthorities['ca.org1.example.com'].url;
         const ca = new FabricCAServices(caURL);

         // 3. Wallet 생성 (또는 기존 Wallet 사용)
         // 이 wallet은 registerUser.js 스크립트가 실행되는 위치에 생성됩니다.
         // 생성된 후에는 blockchain-gateway/wallet/ 디렉토리로 옮겨야 합니다.
         const walletPath = path.join(__dirname, 'wallet'); // 현재 디렉토리 밑에 wallet 폴더 생성
         const wallet = await Wallets.newFileSystemWallet(walletPath);
         console.log(`Wallet 경로: ${walletPath}`);

         // 4. 이미 appUser가 존재하는지 확인
         const identity = await wallet.get('appUser');
         if (identity) {
           console.log('appUser 사용자는 이미 wallet에 존재합니다.');
           return;
         }

         // 5. Admin 사용자 인증서 확인 (appUser를 등록할 권한이 있는 사용자)
         const adminIdentity = await wallet.get('admin');
         if (!adminIdentity) {
           // Admin 인증서가 없으면 오류 메시지 출력 후 종료.
           // Admin을 먼저 등록하는 enrollAdmin.js (또는 유사 스크립트)가 선행되어야 합니다.
           // fabric-samples의 application-javascript 예제에는 보통 enrollAdmin.js가 포함되어 있습니다.
           // 이 enrollAdmin.js를 먼저 실행해서 admin 사용자를 wallet에 등록해야 합니다.
           console.log('Admin 사용자가 wallet에 존재하지 않습니다. enrollAdmin.js를 먼저 실행하여 Admin을 등록하세요.');
           console.log('Hint: fabric-samples/application-javascript/enrollAdmin.js 를 참고하거나 실행하세요.');
           return;
         }

         // 6. Admin 사용자 컨텍스트 가져오기
         const provider = wallet.getProviderRegistry().getProvider(adminIdentity.type);
         const adminUser = await provider.getUserContext(adminIdentity, 'admin');

         // 7. CA에 appUser 등록 요청 및 secret(등록 비밀번호) 받기
         const secret = await ca.register({
           affiliation: 'org1.department1', // 조직 내 소속 (org1.example.com의 경우)
           enrollmentID: 'appUser',         // 등록할 사용자 ID
           role: 'client'                   // 역할 (일반 클라이언트)
         }, adminUser);                     // Admin 권한으로 요청

         // 8. 받은 secret으로 appUser 등록(enroll) 및 인증서/개인키 받기
         const enrollment = await ca.enroll({
           enrollmentID: 'appUser',
           enrollmentSecret: secret
         });

         // 9. X.509 형식의 신원 정보 생성
         const x509Identity = {
           credentials: {
             certificate: enrollment.certificate,      // 발급받은 인증서
             privateKey: enrollment.key.toBytes(),   // 발급받은 개인키
           },
           mspId: 'Org1MSP',                         // 조직의 MSP ID (Org1의 경우)
           type: 'X.509',
         };

         // 10. 생성된 appUser의 신원 정보를 Wallet에 저장
         await wallet.put('appUser', x509Identity);
         console.log('appUser 사용자가 성공적으로 등록되었고 wallet에 저장되었습니다.');
         console.log('이제 "fabric-samples/application-gateway/wallet/" 폴더(또는 registerUser.js가 생성한 wallet 폴더)의 내용을 "blockchain-gateway/wallet/" 폴더로 복사해주세요.');
    
       } catch (error) {
         console.error(`appUser 등록 실패: ${error.stack || error}`);
         process.exit(1); // 오류 발생 시 스크립트 종료
       }
     }

     main();
     ```

   *   **`registerUser.js` 파일의 역할:**
      *   Fabric CA(Certificate Authority, 인증 기관)에 접속합니다.
      *   먼저 `admin` 사용자의 자격증명을 사용해서 `appUser`라는 새로운 사용자를 CA에 등록(register)합니다. (마치 관리자가 새 직원 계정을 만들어주는 것과 비슷합니다.)
      *   성공적으로 등록되면, `appUser`의 실제 인증서와 개인키를 발급(enroll)받습니다.
      *   이 인증서와 개인키를 `registerUser.js`가 실행된 폴더 아래의 `wallet/` 폴더에 `appUser`라는 이름으로 저장합니다.
   *   **⚠️ 중요 - `admin` 사용자 등록 선행 작업:**
      `registerUser.js`를 실행하기 전에, `wallet`에 `admin` 사용자의 인증서가 먼저 등록되어 있어야 합니다. Hyperledger Fabric 샘플에는 보통 `enrollAdmin.js`와 같은 스크립트가 포함되어 있습니다. 이 스크립트를 먼저 실행하여 `admin` 사용자를 `wallet`에 등록해야 `registerUser.js`가 정상적으로 `admin` 권한을 사용하여 `appUser`를 등록할 수 있습니다. 만약 `admin`이 없다면 `registerUser.js` 실행 시 "Admin identity not found" 오류가 발생합니다.
      *   **조치:** `fabric-samples/application-javascript/enrollAdmin.js` (또는 유사한 파일)를 찾아 먼저 실행하거나, 해당 로직을 참고하여 `admin`을 `registerUser.js`가 사용하는 `wallet`에 등록해주세요. `enrollAdmin.js`도 `registerUser.js`와 유사하게 `connection-org1.json` 경로와 `wallet` 경로 설정이 필요합니다.

-> dy9828@DY-COM:/mnt/c/Users/dy_98/fabric-samples/auction-simple/application-javascript$
-> npm install
-> node enrollAdmin.js Org1
-> C:\Users\dy_98\fabric-samples\auction-simple\application-javascript\wallet 폴더의 org1의 admin.id를
blockchain-gateway\wallet폴더에 집어넣기

**3. `registerUser.js` 실행:**

   *   터미널에서 `registerUser.js` 파일이 있는 디렉토리로 이동합니다. (예: `cd fabric-samples/application-gateway`)
   *   다음 명령어를 실행합니다:
      ```bash
      node registerUser.js
      ```
if Error: Cannot find module ‘fabric-ca-client’
blockchain-gateway 폴더에서 다음 명령어를 실행하여 필요한 라이브러리를 설치해주세요.
-> npm install fabric-ca-client

   *   성공적으로 실행되면 "appUser 등록 완료" 또는 "appUser 사용자가 성공적으로 등록되었고 wallet에 저장되었습니다." 같은 메시지가 콘솔에 출력되고, `registerUser.js`가 있는 폴더 아래에 `wallet/` 폴더가 생성되며 그 안에 `appUser` (또는 `appUser.id`) 파일이 생깁니다.

**4. `wallet` 폴더 내용 복사 ❗️매우 중요❗️:**

   *   `registerUser.js`를 실행하여 생성된 `wallet/` 폴더 (예: `fabric-samples/application-gateway/wallet/`) 안의 **모든 내용 (주로 `appUser` 파일 또는 `appUser.id` 파일)** 을 우리가 처음에 만든 **`blockchain-gateway/wallet/` 폴더로 복사 또는 이동**해야 합니다.
   *   `gateway.js` 코드는 `blockchain-gateway/wallet/` 경로에서 `appUser`의 인증서를 찾기 때문입니다.
   *   만약 `blockchain-gateway/wallet` 폴더가 없다면 새로 만들어주세요.

---

**요약 및 다음 단계:**

1.  `blockchain-gateway/` 폴더를 만들고, 그 안에 Node.js 게이트웨이 관련 파일(`gateway.js`, `connection.json`, `package.json`)을 준비했습니다.
2.  `registerUser.js`를 (아마도 `fabric-samples/application-gateway/`에서) 실행하여 `appUser`의 인증서를 생성하고, 그 결과를 `blockchain-gateway/wallet/` 폴더로 옮겼습니다. (선행 작업으로 `enrollAdmin.js` 실행이 필요할 수 있습니다.)
3.  이제 `blockchain-gateway/` 폴더에서 다음 명령어로 Node.js 게이트웨이 서버를 실행할 수 있습니다:
    ```bash
    cd path/to/your/blockchain-gateway  # blockchain-gateway 폴더로 이동
    node gateway.js
    ```
    서버가 정상적으로 실행되면 "Blockchain Gateway 서버가 4000번 포트에서 실행 중입니다." 라는 메시지가 뜰 것입니다.

이제 Spring Boot 애플리케이션에서 파일 업로드 후 `http://localhost:4000/store`로 파일 ID와 해시를 `POST` 요청으로 보내면, Node.js 게이트웨이가 이를 받아 Hyperledger Fabric에 기록하게 됩니다.

설명이 길었지만, 각 단계의 의미와 파일들의 역할을 이해하시는 데 도움이 되었으면 좋겠습니다. 혹시 특정 부분에서 막히거나 추가 질문이 있으시면 언제든지 다시 물어봐 주세요!


=== 방화벽 해제 ===
Spring Boot (Java)의 아웃바운드 규칙 확인/추가:
Windows 방화벽 고급 설정으로 이동합니다.
“아웃바운드 규칙” 을 선택합니다.
새 규칙을 만듭니다.
규칙 종류: “프로그램” 선택 후 다음.
프로그램 경로: java.exe 또는 OpenJDK Platform binary의 전체 경로를 지정합니다. (Eclipse에서 어떤 JDK를 사용하는지 확인하여 해당 경로의 java.exe를 지정해야 합니다. 예를 들어 C:\Program Files\Java\jdk-17\bin\java.exe 등)
작업: “연결 허용” 선택 후 다음.
프로필: “도메인”, “개인”, “공용” 모두 선택 (테스트 목적).
이름: “Spring Boot to WSL Node.js (아웃바운드)” 같이 식별하기 쉽게 지정.
또는, 좀 더 관대한 규칙으로:
규칙 종류: “포트” 선택 후 다음.
프로토콜 및 포트: “TCP”, 특정 원격 포트: “4000”.
작업: “연결 허용”.
프로필: 모두 선택.
이름: “Allow TCP Outbound Port 4000 for WSL Node”
WSL (Node.js) 측 인바운드 규칙 확인/추가 (Windows 방화벽에서 설정):
Windows 방화벽 고급 설정에서 “인바운드 규칙” 을 선택합니다.
새 규칙을 만듭니다.
규칙 종류: “포트” 선택 후 다음.
프로토콜 및 포트: “TCP”, 특정 로컬 포트: “4000”.
작업: “연결 허용” 선택 후 다음.
프로필: 모두 선택.
이름: “Allow TCP Inbound Port 4000 from Windows for WSL Node”
범위 탭에서: “원격 IP 주소” 를 “다음 IP 주소” 로 선택하고, Windows 호스트의 IP 주소 (또는 Spring Boot가 실행되는 머신의 IP, 일반적으로 로컬 네트워크 IP)를 추가하거나, 테스트를 위해 “모든 IP 주소” 로 설정해볼 수 있습니다. 하지만 더 안전하게는 Windows가 WSL에 접속할 때 사용하는 IP (아마도 172.17.x.x 대역의 게이트웨이 IP 또는 Windows 호스트의 물리적 네트워크 IP)로 제한하는 것이 좋습니다. 지금은 일단 “모든 IP 주소” 로 테스트 해보는 것도 방법입니다.

===우분투 IP 확인 및 포트포워딩===
ip addr | grep 'inet '

powershell

netsh interface portproxy add v4tov4 listenport=4000 listenaddress=0.0.0.0 connectport=4000 connectaddress=172.17.226.23
netsh interface portproxy delete v4tov4 listenport=4000 listenaddress=0.0.0.0
netsh interface portproxy show all
netsh interface portproxy delete v4tov4 listenport=4000 listenaddress=0.0.0.0
netsh interface portproxy add v4tov4 listenport=4000 listenaddress=0.0.0.0 connectport=4000 connectaddress=172.17.226.23
netsh interface portproxy show all

===해시 값 확인===
http://172.17.226.23:4000/query/슬픈 고냥쓰.jpg
(또는 Spring Boot과 동일한 WSL 환경이라면 http://localhost:4000/query/슬픈 고냥쓰.jpg)